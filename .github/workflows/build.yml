# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Basic CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  web:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [ 16.x ]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install node deps
      working-directory: neutron-im-web
      run: npm ci --cache .npm --quiet --no-progress
    
    - name: Cache
      id: cache-node-modules
      uses: actions/cache@v2.1.6
      with:
        # A list of files, directories, and wildcard patterns to cache and restore
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Generate files
      working-directory: neutron-im-web
      run: |
        npm run build --if-present

  server:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Build with Gradle
      uses: gradle/gradle-build-action@937999e9cc2425eddc7fd62d1053baf041147db7
      env:
        CI: true
      with:
        build-root-directory: neutron-im-server
        # Cache downloaded JDKs in addition to the default directories.
        gradle-home-cache-includes: |
            caches
            notifications
            jdks
        # Exclude the local build-cache from the directories cached.
        gradle-home-cache-excludes: |
            caches/build-cache-1
        arguments: build

  desktop: 
    strategy:
      matrix:
        os: [ windows-latest, macos-latest, ubuntu-latest ]
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Build with Gradle
      uses: gradle/gradle-build-action@937999e9cc2425eddc7fd62d1053baf041147db7
      env:
        CI: true
      with:
        build-root-directory: neutron-im-desktop
        # Cache downloaded JDKs in addition to the default directories.
        gradle-home-cache-includes: |
            caches
            notifications
            jdks
        # Exclude the local build-cache from the directories cached.
        gradle-home-cache-excludes: |
            caches/build-cache-1
        arguments: build

  static:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [ 16.x ]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install node deps
      working-directory: neutron-im-static-server
      run: npm ci --cache .npm --quiet --no-progress
    
    - name: Cache
      id: cache-node-modules
      uses: actions/cache@v2.1.6
      with:
        # A list of files, directories, and wildcard patterns to cache and restore
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Generate files
      working-directory: neutron-im-static-server
      run: |
        npm run build --if-present
        
    - name: SCP Command to Transfer Files
      # You may pin to the exact commit or the version.
      # uses: appleboy/scp-action@f57f59fba9f7f05a7857eeb06d556738cc696279
      uses: appleboy/scp-action@v0.1.2
      with:
        # scp remote host
        host: ${{ secrets.IP }} # optional
        # scp username
        username: ${{ secrets.USERNAME }} # optional
        # scp password
        password: ${{ secrets.PASSWORD }} # optional
        source: ./dist
        rm: true
        target: /home/ubuntu/deploy/
